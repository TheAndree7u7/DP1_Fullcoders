package com.plg.utils.simulacion;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.CompletableFuture;

import com.plg.entity.Averia;
import com.plg.entity.Camion;
import com.plg.entity.Coordenada;
import com.plg.entity.Pedido;
import com.plg.utils.Simulacion;
import com.plg.utils.AlgoritmoGenetico;
import com.plg.utils.Individuo;
import com.plg.utils.Parametros;
import com.plg.entity.Mapa;
import com.plg.dto.IndividuoDto;

/**
 * Clase para manejar el rec√°lculo din√°mico de la simulaci√≥n cuando ocurren aver√≠as.
 * 
 * Este sistema permite:
 * 1. Detectar cuando ocurre una aver√≠a en un paquete temporal
 * 2. Guardar el estado actual de todos los camiones
 * 3. Recalcular la simulaci√≥n desde el momento de la aver√≠a
 * 4. Aplicar la nueva soluci√≥n y continuar con la simulaci√≥n normal
 */
public class RecalculoDinamico {
    
    private static final Map<String, SnapshotCamion> snapshotCamiones = new HashMap<>();
    private static boolean recalculoEnProceso = false;
    
    /**
     * Estructura para almacenar el estado de un cami√≥n en un momento dado
     */
    public static class SnapshotCamion {
        public String codigoCamion;
        public Coordenada posicion;
        public LocalDateTime fechaSnapshot;
        public double porcentajeRuta;
        public String estadoAnterior;
        
        public SnapshotCamion(String codigoCamion, Coordenada posicion, LocalDateTime fechaSnapshot, 
                           double porcentajeRuta, String estadoAnterior) {
            this.codigoCamion = codigoCamion;
            this.posicion = posicion;
            this.fechaSnapshot = fechaSnapshot;
            this.porcentajeRuta = porcentajeRuta;
            this.estadoAnterior = estadoAnterior;
        }
    }
    
    /**
     * Inicia el proceso de rec√°lculo din√°mico cuando ocurre una aver√≠a.
     * 
     * @param codigoCamionAveriado c√≥digo del cami√≥n que sufri√≥ la aver√≠a
     * @param averia la aver√≠a que desencadena el rec√°lculo
     * @param camiones lista de todos los camiones activos
     */
    public static void iniciarRecalculo(String codigoCamionAveriado, Averia averia, List<Camion> camiones) {
        if (recalculoEnProceso) {
            System.out.println("‚ö†Ô∏è REC√ÅLCULO: Ya hay un rec√°lculo en proceso, ignorando nueva solicitud");
            return;
        }
        
        try {
            recalculoEnProceso = true;
            LocalDateTime fechaAveria = Simulacion.getFechaActual();
            
            System.out.println("üîÑ REC√ÅLCULO DIN√ÅMICO INICIADO");
            System.out.println("üìÖ Fecha/Hora de aver√≠a: " + fechaAveria);
            System.out.println("üöõ Cami√≥n averiado: " + codigoCamionAveriado);
            System.out.println("‚ö†Ô∏è Tipo de aver√≠a: " + averia.getTipoIncidente().getCodigo());
            
            // 0. PAUSAR LA SIMULACI√ìN INMEDIATAMENTE
            Simulacion.pausarPorAveria();
            System.out.println("‚è∏Ô∏è SIMULACI√ìN PAUSADA CONFIRMADA - Estado: " + Simulacion.estaPausadaPorAveria());
            
            // 1. Guardar snapshot del estado global de todos los camiones
            guardarEstadoGlobalCamiones(camiones, fechaAveria);
            
            // 2. Determinar el paquete temporal actual
            int paqueteActual = GestorHistorialSimulacion.getIndicePaqueteActual();
            System.out.println("üì¶ Paquete temporal afectado: " + paqueteActual);
            
            // 3. Invalidar todos los paquetes futuros
            int paquetesInvalidados = GestorHistorialSimulacion.invalidarPaquetesFuturos(paqueteActual);
            System.out.println("üóëÔ∏è Paquetes invalidados: " + paquetesInvalidados);
            
            // 4. Liberar pedidos del cami√≥n averiado
            liberarPedidosCamionAveriado(codigoCamionAveriado);
            
            // 5. Ejecutar rec√°lculo en hilo separado para no bloquear la simulaci√≥n
            CompletableFuture.runAsync(() -> {
                try {
                    // Delay m√≠nimo para hacer visible la pausa (1 segundo)
                    System.out.println("‚è≥ REC√ÅLCULO: Manteniendo pausa visible por 1 segundo...");
                    Thread.sleep(1000);
                    ejecutarRecalculoConParche(paqueteActual, fechaAveria, codigoCamionAveriado);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    System.err.println("‚ùå Rec√°lculo interrumpido: " + e.getMessage());
                }
            });
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al iniciar rec√°lculo din√°mico: " + e.getMessage());
            e.printStackTrace();
            recalculoEnProceso = false;
        }
    }
    
    /**
     * Guarda un snapshot completo del estado global de todos los camiones.
     * Incluye posici√≥n, estado, rutas asignadas y progreso.
     */
    private static void guardarEstadoGlobalCamiones(List<Camion> camiones, LocalDateTime fechaSnapshot) {
        snapshotCamiones.clear();
        
        System.out.println("üì∏ GUARDANDO ESTADO GLOBAL DE CAMIONES");
        System.out.println("üìÖ Fecha snapshot: " + fechaSnapshot);
        System.out.println("üöõ Total camiones: " + camiones.size());
        
        for (Camion camion : camiones) {
            // Calcular porcentaje de progreso en la ruta actual
            double porcentajeRuta = 0.0;
            if (camion.getGen() != null && camion.getGen().getRutaFinal() != null) {
                // Aqu√≠ se podr√≠a calcular el progreso real basado en la posici√≥n actual
                porcentajeRuta = 0.0; // Por ahora en 0
            }
            
            SnapshotCamion snapshot = new SnapshotCamion(
                camion.getCodigo(),
                camion.getCoordenada(),
                fechaSnapshot,
                porcentajeRuta,
                camion.getEstado().toString()
            );
            
            snapshotCamiones.put(camion.getCodigo(), snapshot);
            System.out.println("üì∏ Snapshot guardado: " + camion.getCodigo() + 
                             " | Pos: (" + camion.getCoordenada().getFila() + ", " + camion.getCoordenada().getColumna() + ")" +
                             " | Estado: " + camion.getEstado());
        }
        
        System.out.println("‚úÖ Estado global guardado exitosamente");
    }

    /**
     * Libera los pedidos del cami√≥n averiado para que puedan ser reasignados.
     * Los pedidos pasan a estado REGISTRADO y quedan disponibles para otros camiones.
     */
    private static void liberarPedidosCamionAveriado(String codigoCamionAveriado) {
        try {
            System.out.println("üîì LIBERANDO PEDIDOS DEL CAMI√ìN AVERIADO: " + codigoCamionAveriado);
            
            // Obtener pedidos por atender y planificados
            List<Pedido> pedidosLiberados = Simulacion.pedidosPlanificados.stream()
                .filter(pedido -> {
                    // Verificar si el pedido estaba asignado al cami√≥n averiado
                    // Esta l√≥gica depende de c√≥mo se almacena la asignaci√≥n
                    return true; // Por ahora liberar todos los pedidos planificados
                })
                .toList();
            
            // Mover pedidos de planificados a por atender
            for (Pedido pedido : pedidosLiberados) {
                Simulacion.pedidosPlanificados.remove(pedido);
                Simulacion.pedidosPorAtender.add(pedido);
                pedido.setEstado(com.plg.entity.EstadoPedido.REGISTRADO);
                System.out.println("üîì Pedido liberado: " + pedido.getCodigo() + " | Volumen: " + pedido.getVolumenGLPAsignado() + " m¬≥");
            }
            
            System.out.println("‚úÖ Pedidos liberados: " + pedidosLiberados.size());
            System.out.println("üìã Pedidos por atender ahora: " + Simulacion.pedidosPorAtender.size());
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al liberar pedidos del cami√≥n averiado: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Determina en qu√© paquete temporal ocurre la aver√≠a.
     * Cada paquete representa un intervalo de tiempo de la simulaci√≥n.
     */
    private static int determinarPaqueteActual(LocalDateTime fechaAveria) {
        // Calcular el paquete basado en el intervalo de tiempo configurado
        LocalDateTime fechaInicio = fechaAveria.withHour(0).withMinute(0).withSecond(0).withNano(0);
        long minutosDesdeInicio = java.time.Duration.between(fechaInicio, fechaAveria).toMinutes();
        
        // Cada paquete representa un intervalo de tiempo (por ejemplo, 2 horas = 120 minutos)
        int minutosPorPaquete = Parametros.intervaloTiempo * 60; // Convertir a minutos
        int paquete = (int) (minutosDesdeInicio / minutosPorPaquete);
        
        System.out.println("‚è±Ô∏è Minutos desde inicio del d√≠a: " + minutosDesdeInicio);
        System.out.println("‚è±Ô∏è Minutos por paquete: " + minutosPorPaquete);
        System.out.println("üì¶ Paquete calculado: " + paquete);
        
        return paquete;
    }
    
    /**
     * Ejecuta el rec√°lculo con paquete parche cuando ocurre una aver√≠a.
     * Genera un paquete parche que cubre el tiempo restante del paquete actual,
     * seguido de paquetes completos normales.
     */
    private static void ejecutarRecalculoConParche(int paqueteActual, LocalDateTime fechaAveria, String codigoCamionAveriado) {
        try {
            System.out.println("üîÑ EJECUTANDO REC√ÅLCULO CON PAQUETE PARCHE");
            System.out.println("üì¶ Paquete actual afectado: " + paqueteActual);
            System.out.println("üìÖ Fecha aver√≠a: " + fechaAveria);
            System.out.println("üöõ Cami√≥n averiado: " + codigoCamionAveriado);
            System.out.println("‚è∏Ô∏è Estado pausa durante rec√°lculo: " + Simulacion.estaPausadaPorAveria());
            
            // Obtener los pedidos pendientes que necesitan ser recalculados
            List<Pedido> pedidosPendientes = obtenerPedidosPendientes(fechaAveria);
            
            if (pedidosPendientes.isEmpty()) {
                System.out.println("üìù No hay pedidos pendientes para recalcular");
                // A√∫n as√≠ reanudar la simulaci√≥n para evitar que se quede colgada
                Simulacion.notificarPaqueteParcheDisponible();
                System.out.println("üîÑ Simulaci√≥n reanudada a pesar de no haber pedidos pendientes");
                return;
            }
            
            System.out.println("üìã Pedidos a recalcular: " + pedidosPendientes.size());
            
            // 1. Generar paquete parche que cubra el tiempo restante
            generarPaqueteParche(fechaAveria, pedidosPendientes);
            
            // 2. Generar paquetes completos adicionales
            generarPaquetesCompletos(fechaAveria, pedidosPendientes);
            
            System.out.println("‚úÖ Rec√°lculo con paquete parche completado exitosamente");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error durante el rec√°lculo con parche: " + e.getMessage());
            e.printStackTrace();
        } finally {
            recalculoEnProceso = false;
            System.out.println("üîÑ Rec√°lculo din√°mico completado");
        }
    }

    /**
     * Genera un paquete parche que cubre el tiempo restante del paquete actual.
     */
    private static void generarPaqueteParche(LocalDateTime fechaAveria, List<Pedido> pedidosPendientes) {
        try {
            System.out.println("ü©π GENERANDO PAQUETE PARCHE");
            
            // Calcular tiempo restante del paquete actual
            LocalDateTime finPaqueteActual = calcularFinPaqueteActual(fechaAveria);
            long tiempoRestante = java.time.Duration.between(fechaAveria, finPaqueteActual).toHours();
            
            System.out.println("‚è∞ Tiempo restante del paquete: " + tiempoRestante + " horas");
            System.out.println("üìÖ Fin del paquete actual: " + finPaqueteActual);
            
            // Ejecutar algoritmo gen√©tico para el paquete parche
            System.out.println("üß† Ejecutando algoritmo gen√©tico para paquete parche...");
            Simulacion.marcarInicioAlgoritmoGenetico();
            AlgoritmoGenetico algoritmoParche = new AlgoritmoGenetico(Mapa.getInstance(), pedidosPendientes);
            algoritmoParche.ejecutarAlgoritmo();
            Simulacion.marcarFinAlgoritmoGenetico();
            System.out.println("‚úÖ Algoritmo gen√©tico del paquete parche completado");
            
            Individuo solucionParche = algoritmoParche.getMejorIndividuo();
            
            if (solucionParche != null) {
                System.out.println("‚úÖ Soluci√≥n parche generada | Fitness: " + solucionParche.getFitness());
                
                // Aplicar la soluci√≥n parche
                CamionStateApplier.aplicarEstadoFinalCamiones(solucionParche);
                
                // Crear DTO del paquete parche
                IndividuoDto paqueteParche = new IndividuoDto(
                    solucionParche, 
                    pedidosPendientes, 
                    List.of(), // Lista vac√≠a de bloqueos por ahora
                    fechaAveria
                );
                
                // Agregar el paquete parche al historial
                GestorHistorialSimulacion.agregarPaqueteParche(paqueteParche);
                
                System.out.println("ü©π Paquete parche agregado al historial");
                
                // NOTIFICAR QUE EL PAQUETE PARCHE EST√Å DISPONIBLE - REANUDAR SIMULACI√ìN
                Simulacion.notificarPaqueteParcheDisponible();
                
                System.out.println("üîÑ Simulaci√≥n reanudada - Paquete parche ser√° consumido inmediatamente");
                
            } else {
                System.err.println("‚ùå No se pudo generar soluci√≥n parche");
                // A√∫n as√≠ reanudar la simulaci√≥n para evitar que se quede colgada
                Simulacion.notificarPaqueteParcheDisponible();
                System.out.println("üîÑ Simulaci√≥n reanudada a pesar del error en paquete parche");
            }
            
        } catch (Exception e) {
            Simulacion.marcarFinAlgoritmoGenetico(); // Marcar fin en caso de error
            System.err.println("‚ùå Error al generar paquete parche: " + e.getMessage());
            e.printStackTrace();
            
            // Reanudar simulaci√≥n en caso de error para evitar que se quede colgada
            Simulacion.notificarPaqueteParcheDisponible();
            System.out.println("üîÑ Simulaci√≥n reanudada despu√©s de error en paquete parche");
        }
    }

    /**
     * Genera paquetes completos adicionales despu√©s del paquete parche.
     */
    private static void generarPaquetesCompletos(LocalDateTime fechaAveria, List<Pedido> pedidosPendientes) {
        try {
            System.out.println("üì¶ GENERANDO PAQUETES COMPLETOS ADICIONALES");
            
            // Calcular cuando termina el paquete parche
            LocalDateTime finPaqueteParche = calcularFinPaqueteActual(fechaAveria);
            
            // Generar al menos un paquete completo adicional (como menciona el usuario)
            LocalDateTime inicioSiguientePaquete = finPaqueteParche;
            LocalDateTime finSiguientePaquete = inicioSiguientePaquete.plusHours(2); // Paquete de 2 horas
            
            System.out.println("üìÖ Generando paquete completo desde " + inicioSiguientePaquete + " hasta " + finSiguientePaquete);
            
            // Ejecutar algoritmo gen√©tico para el paquete completo
            AlgoritmoGenetico algoritmoCompleto = new AlgoritmoGenetico(Mapa.getInstance(), pedidosPendientes);
            algoritmoCompleto.ejecutarAlgoritmo();
            
            Individuo solucionCompleta = algoritmoCompleto.getMejorIndividuo();
            
            if (solucionCompleta != null) {
                System.out.println("‚úÖ Soluci√≥n completa generada | Fitness: " + solucionCompleta.getFitness());
                
                // Aplicar la soluci√≥n completa
                CamionStateApplier.aplicarEstadoFinalCamiones(solucionCompleta);
                
                // Crear DTO del paquete completo
                IndividuoDto paqueteCompleto = new IndividuoDto(
                    solucionCompleta, 
                    pedidosPendientes, 
                    List.of(), // Lista vac√≠a de bloqueos por ahora
                    inicioSiguientePaquete
                );
                
                // Agregar el paquete completo al historial
                GestorHistorialSimulacion.agregarPaquete(paqueteCompleto);
                
                System.out.println("üì¶ Paquete completo agregado al historial");
                
            } else {
                System.err.println("‚ùå No se pudo generar soluci√≥n completa");
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al generar paquetes completos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Calcula cu√°ndo termina el paquete actual basado en el tiempo de aver√≠a.
     */
    private static LocalDateTime calcularFinPaqueteActual(LocalDateTime fechaAveria) {
        // Calcular el final del paquete actual
        // Por ejemplo, si los paquetes duran 2 horas, encontrar el pr√≥ximo m√∫ltiplo de 2 horas
        int horaActual = fechaAveria.getHour();
        int horaFinPaquete = ((horaActual / 2) + 1) * 2; // Pr√≥ximo m√∫ltiplo de 2
        
        return fechaAveria.withHour(horaFinPaquete).withMinute(0).withSecond(0).withNano(0);
    }
    
    /**
     * Obtiene los pedidos pendientes que necesitan ser recalculados.
     */
    private static List<Pedido> obtenerPedidosPendientes(LocalDateTime fechaAveria) {
        // Aqu√≠ se implementar√≠a la l√≥gica para obtener los pedidos pendientes
        // Por ahora retornamos una lista vac√≠a
        return Simulacion.pedidosPorAtender.stream().toList();
    }
    
    /**
     * Aplica la soluci√≥n recalculada a los camiones.
     */
    private static void aplicarSolucionRecalculada(Individuo solucion, LocalDateTime fechaAveria, int paquete) {
        System.out.println("üîß Aplicando soluci√≥n recalculada...");
        
        // Aplicar el estado final de los camiones
        CamionStateApplier.aplicarEstadoFinalCamiones(solucion);
        
        System.out.println("‚úÖ Soluci√≥n recalculada aplicada para paquete " + paquete);
    }
    
    /**
     * Crea un nuevo paquete recalculado para el historial de la simulaci√≥n.
     */
    private static void crearPaqueteRecalculado(Individuo solucion, List<Pedido> pedidos, 
                                               LocalDateTime fechaAveria, int paquete) {
        try {
            // Crear DTO del individuo recalculado
            IndividuoDto paqueteRecalculado = new IndividuoDto(
                solucion, 
                pedidos, 
                List.of(), // Lista vac√≠a de bloqueos por ahora
                fechaAveria
            );
            
            // Agregar al historial de simulaci√≥n
            GestorHistorialSimulacion.agregarPaqueteRecalculado(paqueteRecalculado, paquete);
            
            System.out.println("üì¶ Paquete recalculado agregado al historial");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al crear paquete recalculado: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Verifica si hay un rec√°lculo en proceso.
     */
    public static boolean isRecalculoEnProceso() {
        return recalculoEnProceso;
    }
    
    /**
     * Obtiene el snapshot de un cami√≥n espec√≠fico.
     */
    public static SnapshotCamion getSnapshotCamion(String codigoCamion) {
        return snapshotCamiones.get(codigoCamion);
    }
    
    /**
     * Limpia todos los snapshots almacenados.
     */
    public static void limpiarSnapshots() {
        snapshotCamiones.clear();
        System.out.println("üßπ Snapshots de camiones limpiados");
    }
} 