package com.plg.utils;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.SynchronousQueue;
import java.util.stream.Collectors;

import com.plg.config.DataLoader;
import com.plg.dto.IndividuoDto;
import com.plg.entity.Almacen;
import com.plg.entity.Bloqueo;
import com.plg.entity.Camion;
import com.plg.entity.Coordenada;
import com.plg.entity.Mapa;
import com.plg.entity.Nodo;
import com.plg.entity.Pedido;
import com.plg.entity.TipoAlmacen;
import com.plg.entity.TipoNodo;
import com.plg.utils.simulacion.ConfiguracionSimulacion;
import com.plg.utils.simulacion.MantenimientoManager;
import com.plg.utils.simulacion.AveriasManager;
import com.plg.utils.simulacion.UtilesSimulacion;
import com.plg.utils.simulacion.CamionStateApplier;
import com.plg.utils.simulacion.IndividuoFactory;
import com.plg.utils.simulacion.GestorHistorialSimulacion;

public class Simulacion {

    private static List<Pedido> pedidosSemanal;
    private static LocalDateTime fechaActual;
    public static Set<Pedido> pedidosPorAtender = new LinkedHashSet<>();
    public static Set<Pedido> pedidosPlanificados = new LinkedHashSet<>();
    public static Set<Pedido> pedidosEntregados = new LinkedHashSet<>();
    public static Individuo mejorIndividuo = null;
    
    // Queue de paquetes generados para el frontend
    // Administrado por GestorHistorialSimulacion
    public static List<IndividuoDto> historialSimulacion = new ArrayList<>();
    private static int indiceActualFrontend = 0;
    private static boolean simulacionEnProceso = false;
    private static int contadorPaquetes = 0; // Contador secuencial de paquetes
    
    // Modo de ejecuci√≥n: true para standalone (generar paquetes continuamente)
    public static boolean modoStandalone = true;

    // Colas para simulaci√≥n
    public static BlockingQueue<Object> gaTriggerQueue = new SynchronousQueue<>();
    public static BlockingQueue<IndividuoDto> gaResultQueue = new SynchronousQueue<>();
    public static Semaphore iniciar = new Semaphore(0);
    public static Semaphore continuar = new Semaphore(0);
    
    // Control de pausa por aver√≠as
    private static volatile boolean pausadaPorAveria = false;
    private static final Object pausaLock = new Object();
    private static volatile boolean paqueteParcheDisponible = false;
    private static volatile boolean algoritmoGeneticoEnEjecucion = false;

    // Getters y setters para permitir acceso desde clases auxiliares
    public static List<Pedido> getPedidosSemanal() {
        return pedidosSemanal;
    }

    public static void setPedidosSemanal(List<Pedido> pedidos) {
        pedidosSemanal = pedidos;
    }

    public static LocalDateTime getFechaActual() {
        return fechaActual;
    }

    public static void setFechaActual(LocalDateTime fecha) {
        fechaActual = fecha;
    }

    public static void configurarSimulacion(LocalDateTime startDate) {
        ConfiguracionSimulacion.configurarSimulacion(startDate);
    }

    /**
     * Pausa la simulaci√≥n por aver√≠a. La simulaci√≥n esperar√° hasta que se genere el paquete parche.
     */
    public static void pausarPorAveria() {
        synchronized (pausaLock) {
            System.out.println("‚è∏Ô∏è SOLICITANDO PAUSA DE SIMULACI√ìN por aver√≠a...");
            
            // Si hay un algoritmo gen√©tico en ejecuci√≥n, esperar a que termine
            while (algoritmoGeneticoEnEjecucion) {
                System.out.println("‚è≥ Esperando que termine el algoritmo gen√©tico actual...");
                try {
                    Thread.sleep(100); // Esperar 100ms antes de verificar de nuevo
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
            
            pausadaPorAveria = true;
            paqueteParcheDisponible = false;
            System.out.println("‚è∏Ô∏è SIMULACI√ìN PAUSADA CONFIRMADA: Esperando paquete parche por aver√≠a");
        }
    }

    /**
     * Notifica que el paquete parche est√° disponible y reanuda la simulaci√≥n.
     */
    public static void notificarPaqueteParcheDisponible() {
        synchronized (pausaLock) {
            paqueteParcheDisponible = true;
            pausadaPorAveria = false;
            pausaLock.notifyAll();
            System.out.println("‚ñ∂Ô∏è SIMULACI√ìN REANUDADA: Paquete parche disponible, consumiendo inmediatamente");
        }
    }

    /**
     * Verifica si la simulaci√≥n est√° pausada por aver√≠a.
     */
    public static boolean estaPausadaPorAveria() {
        return pausadaPorAveria;
    }

    /**
     * Marca el inicio de la ejecuci√≥n del algoritmo gen√©tico.
     */
    public static void marcarInicioAlgoritmoGenetico() {
        algoritmoGeneticoEnEjecucion = true;
    }

    /**
     * Marca el fin de la ejecuci√≥n del algoritmo gen√©tico.
     */
    public static void marcarFinAlgoritmoGenetico() {
        algoritmoGeneticoEnEjecucion = false;
    }

    /**
     * Verifica si el algoritmo gen√©tico est√° en ejecuci√≥n.
     */
    public static boolean isAlgoritmoGeneticoEnEjecucion() {
        return algoritmoGeneticoEnEjecucion;
    }

    /**
     * Espera hasta que el paquete parche est√© disponible.
     */
    private static void esperarPaqueteParche() throws InterruptedException {
        synchronized (pausaLock) {
            while (pausadaPorAveria && !paqueteParcheDisponible) {
                System.out.println("‚è≥ Simulaci√≥n esperando paquete parche...");
                pausaLock.wait(1000); // Esperar m√°ximo 1 segundo antes de verificar de nuevo
            }
        }
    }

    public static void ejecutarSimulacion() {
        try {
            GestorHistorialSimulacion.setEnProceso(true);
            ConfiguracionSimulacion.imprimirDatosSimulacion();
            LocalDateTime fechaLimite = fechaActual.plusDays(7);
            System.out.println("üöÄ Iniciando simulaci√≥n hasta: " + fechaLimite);
            System.out.println("üìÖ Fecha de inicio (desde frontend): " + fechaActual);
            System.out.println("üì¶ Pedidos semanales iniciales: " + pedidosSemanal.size());
            
            while (!pedidosSemanal.isEmpty() && (fechaActual.isBefore(fechaLimite) || fechaActual.isEqual(fechaLimite))) {
                // Verificar si el hilo ha sido interrumpido
                if (Thread.currentThread().isInterrupted()) {
                    System.out.println("üõë Simulaci√≥n interrumpida por solicitud externa");
                    GestorHistorialSimulacion.setEnProceso(false);
                    return;
                }
                
                // Verificar si la simulaci√≥n est√° pausada por aver√≠a
                try {
                    if (estaPausadaPorAveria()) {
                        System.out.println("‚è∏Ô∏è Simulaci√≥n pausada - Esperando paquete parche...");
                    }
                    esperarPaqueteParche();
                    if (!estaPausadaPorAveria()) {
                        System.out.println("‚ñ∂Ô∏è Simulaci√≥n reanudada - Continuando con paquete normal");
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    System.out.println("üõë Simulaci√≥n interrumpida mientras esperaba paquete parche");
                    GestorHistorialSimulacion.setEnProceso(false);
                    return;
                }
                
                Pedido pedido = pedidosSemanal.get(0);
            // Voy agregando pedidos a la lista de pedidos
            if (UtilesSimulacion.pedidoConFechaMenorAFechaActual(pedido, fechaActual)) {
                pedidosSemanal.remove(0);
                pedidosPorAtender.add(pedido);
            } else {
                List<Pedido> pedidosEnviar = UtilesSimulacion.unirPedidosSinRepetidos(pedidosPlanificados, pedidosPorAtender);
                actualizarEstadoGlobal(fechaActual, pedidosEnviar);
                List<Bloqueo> bloqueosActivos = actualizarBloqueos(fechaActual);
                System.out.println("------------------------");
                System.out.println("Tiempo actual: " + fechaActual);

                if (!pedidosPorAtender.isEmpty()) {
                    
                    // Verificar nuevamente si la simulaci√≥n est√° pausada antes de ejecutar el algoritmo gen√©tico
                    if (estaPausadaPorAveria()) {
                        System.out.println("‚è∏Ô∏è Algoritmo gen√©tico omitido - Simulaci√≥n pausada por aver√≠a");
                        continue; // Saltar esta iteraci√≥n y verificar pausa de nuevo
                    }
                    
                    if (modoStandalone) {
                        // Modo standalone: ejecutar sin esperar sem√°foros
                        try {
                            System.out.println("üß† Ejecutando algoritmo gen√©tico para tiempo: " + fechaActual);
                            marcarInicioAlgoritmoGenetico();
                            AlgoritmoGenetico algoritmoGenetico = new AlgoritmoGenetico(Mapa.getInstance(), pedidosEnviar);
                            algoritmoGenetico.ejecutarAlgoritmo();
                            marcarFinAlgoritmoGenetico();

                            IndividuoDto mejorIndividuoDto = new IndividuoDto(algoritmoGenetico.getMejorIndividuo(),
                                    pedidosEnviar, bloqueosActivos, fechaActual);
                            
                            // Aplicar el estado final de los camiones permanentemente
                            CamionStateApplier.aplicarEstadoFinalCamiones(algoritmoGenetico.getMejorIndividuo());
                            
                            // Agregar al historial para el frontend
                            GestorHistorialSimulacion.agregarPaquete(mejorIndividuoDto);
                        } catch (Exception e) {
                            marcarFinAlgoritmoGenetico(); // Marcar fin incluso en caso de error
                            System.err.println("‚ùå Error en algoritmo gen√©tico en tiempo " + fechaActual + ": " + e.getMessage());
                            e.printStackTrace();
                            
                            // Crear un paquete de emergencia en lugar de no generar nada
                            try {
                                System.out.println("üöë Creando paquete de emergencia para tiempo " + fechaActual);
                                Individuo individuoEmergencia = IndividuoFactory.crearIndividuoVacio();
                                IndividuoDto paqueteEmergencia = new IndividuoDto(individuoEmergencia,
                                        pedidosEnviar, bloqueosActivos, fechaActual);
                                GestorHistorialSimulacion.agregarPaquete(paqueteEmergencia);
                            } catch (Exception e2) {
                                System.err.println("‚ùå Error al crear paquete de emergencia: " + e2.getMessage());
                                e2.printStackTrace();
                            }
                        }
                    } else {
                        // Modo web interactivo: esperar sem√°foros
                        try {
                            iniciar.acquire();
                            AlgoritmoGenetico algoritmoGenetico = new AlgoritmoGenetico(Mapa.getInstance(), pedidosEnviar);
                            algoritmoGenetico.ejecutarAlgoritmo();

                            IndividuoDto mejorIndividuoDto = new IndividuoDto(algoritmoGenetico.getMejorIndividuo(),
                                    pedidosEnviar, bloqueosActivos, fechaActual);
                            gaResultQueue.offer(mejorIndividuoDto);
                            continuar.acquire();

                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            System.err.println("Error al esperar el disparador del algoritmo gen√©tico: " + e.getMessage());
                            e.printStackTrace();
                        }
                    }
                } else {
                    System.out.println("No hay pedidos por atender en este momento.");
                    
                    // Crear paquete vac√≠o para las horas sin pedidos
                    if (modoStandalone) {
                        try {
                            // Crear un individuo vac√≠o con rutas de retorno al almac√©n
                            Individuo individuoVacio = IndividuoFactory.crearIndividuoVacio();
                            
                            IndividuoDto paqueteVacio = new IndividuoDto(individuoVacio,
                                    new ArrayList<>(), bloqueosActivos, fechaActual);
                            
                            // Agregar al historial para el frontend
                            GestorHistorialSimulacion.agregarPaquete(paqueteVacio);
                        } catch (Exception e) {
                            System.err.println("‚ùå Error creando paquete vac√≠o en tiempo " + fechaActual + ": " + e.getMessage());
                            e.printStackTrace();
                        }
                    }
                }
                for (Bloqueo bloqueo : bloqueosActivos) {
                    bloqueo.desactivarBloqueo();
                }

                fechaActual = fechaActual.plusMinutes(Parametros.intervaloTiempo);
                System.out.println("üìä Estado: Pedidos semanales restantes: " + pedidosSemanal.size() + 
                                 ", Por atender: " + pedidosPorAtender.size() + 
                                 ", Planificados: " + pedidosPlanificados.size());
            }
        }
        
        // Explicar por qu√© termin√≥ la simulaci√≥n
        if (pedidosSemanal.isEmpty()) {
            System.out.println("‚úÖ Simulaci√≥n terminada: Todos los pedidos semanales han sido procesados");
        } else if (fechaActual.isAfter(fechaLimite)) {
            System.out.println("‚è∞ Simulaci√≥n terminada: Se alcanz√≥ el l√≠mite de tiempo (" + fechaLimite + ")");
            System.out.println("üì¶ Pedidos semanales no procesados: " + pedidosSemanal.size());
        }
        
        System.out.println("-------------------------");
        System.out.println("Reporte de la simulaci√≥n");
        System.out.println("Fecha final: " + fechaActual);
        System.out.println("Kilometros recorridos: " + Parametros.kilometrosRecorridos);
        System.out.println("Fitness global: " + Parametros.fitnessGlobal);
        System.out.println("Pedidos entregados: " + pedidosEntregados.size());
        System.out.println("Pedidos pendientes: " + pedidosPorAtender.size());
        
        GestorHistorialSimulacion.setEnProceso(false);
        System.out.println("‚úÖ Simulaci√≥n completada. Total de paquetes generados: " + GestorHistorialSimulacion.getTotalPaquetes());
        
        } catch (Exception e) {
            System.err.println("üí• ERROR CR√çTICO EN LA SIMULACI√ìN:");
            System.err.println("Tiempo actual cuando ocurri√≥ el error: " + fechaActual);
            System.err.println("Mensaje de error: " + e.getMessage());
            System.err.println("Tipo de excepci√≥n: " + e.getClass().getSimpleName());
            e.printStackTrace();
            
            System.err.println("\nüìä Estado al momento del error:");
            System.err.println("   ‚Ä¢ Pedidos semanales restantes: " + (pedidosSemanal != null ? pedidosSemanal.size() : "null"));
            System.err.println("   ‚Ä¢ Pedidos por atender: " + (pedidosPorAtender != null ? pedidosPorAtender.size() : "null"));
            System.err.println("   ‚Ä¢ Pedidos planificados: " + (pedidosPlanificados != null ? pedidosPlanificados.size() : "null"));
        }
    }

    /**
     * Obtiene el siguiente paquete de la simulaci√≥n para el frontend
     * Cada llamada devuelve el siguiente paso en secuencia
     */
    public static IndividuoDto obtenerSiguientePaquete() {
        return GestorHistorialSimulacion.obtenerSiguientePaquete();
    }
    
    /**
     * Reinicia la reproducci√≥n desde el inicio para el frontend
     */
    public static void reiniciarReproduccion() {
        GestorHistorialSimulacion.reiniciarReproduccion();
    }
    
    /**
     * Obtiene informaci√≥n del estado actual de la simulaci√≥n
     */
    public static SimulacionInfo obtenerInfoSimulacion() {
        return new SimulacionInfo(
            GestorHistorialSimulacion.getTotalPaquetes(),
            GestorHistorialSimulacion.getPaqueteActual(),
            GestorHistorialSimulacion.isEnProceso(),
            fechaActual
        );
    }
    
    // Clase auxiliar para informaci√≥n de la simulaci√≥n
    public static class SimulacionInfo {
        public final int totalPaquetes;
        public final int paqueteActual;
        public final boolean enProceso;
        public final LocalDateTime tiempoActual;
        
        public SimulacionInfo(int totalPaquetes, int paqueteActual, boolean enProceso, LocalDateTime tiempoActual) {
            this.totalPaquetes = totalPaquetes;
            this.paqueteActual = paqueteActual;
            this.enProceso = enProceso;
            this.tiempoActual = tiempoActual;
        }
    }

    public static void actualizarEstadoGlobal(LocalDateTime fechaActual, List<Pedido> pedidosEnviar) {
        actualizarPedidos(pedidosEnviar);
        actualizarRepositorios(fechaActual);
        actualizarCamiones(fechaActual);
        MantenimientoManager.verificarYActualizarMantenimientos(DataLoader.camiones, fechaActual);
        AveriasManager.actualizarCamionesEnAveria(fechaActual);
    }

    private static void actualizarPedidos(List<Pedido> pedidos) {
        // Borramos los pedidos del mapa
        for (int i = 0; i < Mapa.getInstance().getFilas(); i++) {
            for (int j = 0; j < Mapa.getInstance().getColumnas(); j++) {
                Nodo nodo = Mapa.getInstance().getMatriz().get(i).get(j);
                if (nodo instanceof Pedido) {
                    Nodo nodoaux = Nodo.builder().coordenada(new Coordenada(i, j)).tipoNodo(TipoNodo.NORMAL).build();
                    Mapa.getInstance().setNodo(nodo.getCoordenada(), nodoaux);
                }
            }
        }
        // Colocamos todos los nuevos pedidos en el mapa
        for (Pedido pedido : pedidos) {
            Mapa.getInstance().setNodo(pedido.getCoordenada(), pedido);
        }
    }

    private static List<Bloqueo> actualizarBloqueos(LocalDateTime fechaActual) {
        List<Bloqueo> bloqueos = DataLoader.bloqueos;
        List<Bloqueo> bloqueosActivos = new ArrayList<>();
        for (Bloqueo bloqueo : bloqueos) {
            if (bloqueo.getFechaInicio().isBefore(fechaActual) && bloqueo.getFechaFin().isAfter(fechaActual)) {
                bloqueo.activarBloqueo();
                bloqueosActivos.add(bloqueo);
            }
        }
        return bloqueosActivos;
    }

    private static void actualizarRepositorios(LocalDateTime fechaActual) {
        List<Almacen> almacenes = DataLoader.almacenes;
        if (fechaActual.getHour() == 0 && fechaActual.getMinute() == 0) {
            for (Almacen almacen : almacenes) {
                if (almacen.getTipo() == TipoAlmacen.SECUNDARIO) {
                    almacen.setCapacidadActualGLP(almacen.getCapacidadMaximaGLP());
                    almacen.setCapacidadCombustible(almacen.getCapacidadMaximaCombustible());
                }
            }
        }
    }

    private static void actualizarCamiones(LocalDateTime fechaActual) {
        List<Camion> camiones = DataLoader.camiones;

        for (Camion camion : camiones) {
            camion.actualizarEstado(Parametros.intervaloTiempo, pedidosPorAtender, pedidosPlanificados,
                    pedidosEntregados, fechaActual);
        }
    }

}
