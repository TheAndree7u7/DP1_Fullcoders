package com.plg.service;

import org.springframework.stereotype.Service;

import com.plg.dto.ParametrosDto;
import com.plg.dto.request.ParametrosRequest;
import com.plg.repository.ParametrosRepository;
import com.plg.utils.Parametros;
import com.plg.utils.TipoSimulacion;

/**
 * Servicio para operaciones sobre par치metros de simulaci칩n.
 */
@Service
public class ParametrosService {

    private final ParametrosRepository parametrosRepository;

    public ParametrosService(ParametrosRepository parametrosRepository) {
        this.parametrosRepository = parametrosRepository;
    }

    /**
     * Obtiene todos los par치metros actuales de la simulaci칩n.
     * 
     * @return DTO con todos los par치metros actuales
     */
    public ParametrosDto obtenerParametros() {
        Parametros parametros = parametrosRepository.obtenerParametros();
        return convertirAParametrosDto(parametros);
    }

    /**
     * Actualiza los par치metros de simulaci칩n con los valores proporcionados.
     * Solo actualiza los campos que no son null en el request.
     * 
     * @param request Request con los nuevos valores de par치metros
     * @return DTO con los par치metros actualizados
     */
    public ParametrosDto actualizarParametros(ParametrosRequest request) {
        Parametros parametrosActualizados = parametrosRepository.actualizarParametros(
                request.getDia(),
                request.getMes(),
                request.getAnho(),
                request.getFechaInicial(),
                request.getFechaFinal(),
                request.getIntervaloTiempo(),
                request.getContadorPrueba(),
                request.getKilometrosRecorridos(),
                request.getFitnessGlobal(),
                request.getSemillaAleatoria(),
                request.getPrimeraLlamada(),
                request.getTipoSimulacion());

        System.out.println("丘뙖잺 Par치metros actualizados desde frontend");
        return convertirAParametrosDto(parametrosActualizados);
    }

    /**
     * Reinicia todos los par치metros a sus valores por defecto.
     * 
     * @return DTO con los par치metros reiniciados
     */
    public ParametrosDto reiniciarParametros() {
        Parametros parametrosReiniciados = parametrosRepository.reiniciarParametros();
        System.out.println("游댃 Par치metros reiniciados a valores por defecto");
        return convertirAParametrosDto(parametrosReiniciados);
    }

    /**
     * Obtiene un par치metro espec칤fico por su nombre.
     * 
     * @param nombreParametro Nombre del par치metro a obtener
     * @return Valor del par치metro como String
     */
    public String obtenerParametroEspecifico(String nombreParametro) {
        switch (nombreParametro.toLowerCase()) {
            case "dia":
                return Parametros.dia;
            case "mes":
                return Parametros.mes;
            case "anho":
                return Parametros.anho;
            case "intervalotiempo":
                return String.valueOf(Parametros.intervaloTiempo);
            case "contadorprueba":
                return String.valueOf(Parametros.contadorPrueba);
            case "kilometrosrecorridos":
                return String.valueOf(Parametros.kilometrosRecorridos);
            case "fitnessglobal":
                return String.valueOf(Parametros.fitnessGlobal);
            case "semillaaleatoria":
                return String.valueOf(Parametros.semillaAleatoria);
            case "primerallamada":
                return String.valueOf(Parametros.primera_llamada);
            case "tiposimulacion":
                return Parametros.tipoSimulacion.name();
            default:
                throw new IllegalArgumentException("Par치metro no encontrado: " + nombreParametro);
        }
    }

    /**
     * Convierte un objeto Parametros a ParametrosDto.
     * 
     * @param parametros Objeto Parametros a convertir
     * @return DTO con los valores de los par치metros
     */
    private ParametrosDto convertirAParametrosDto(Parametros parametros) {
        return new ParametrosDto(
                Parametros.dia,
                Parametros.mes,
                Parametros.anho,
                Parametros.fecha_inicial,
                Parametros.fecha_final,
                Parametros.intervaloTiempo,
                Parametros.contadorPrueba,
                Parametros.kilometrosRecorridos,
                Parametros.fitnessGlobal,
                Parametros.semillaAleatoria,
                Parametros.primera_llamada,
                Parametros.tipoSimulacion);
    }
}