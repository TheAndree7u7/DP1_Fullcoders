import type { Individuo } from "../types";
import { API_URLS } from "../config/api";
import { formatearFechaParaBackend } from "../context/simulacion/utils/tiempo";
//import { limpiarPedidos } from "./pedidoApiService";

// Tipos para el manejo de tipo de simulaci√≥n
export type TipoSimulacion = 'DIARIA' | 'SEMANAL' | 'COLAPSO';

export interface TipoSimulacionResponse {
  tipoSimulacionAnterior: TipoSimulacion;
  tipoSimulacionNuevo: TipoSimulacion;
  mensaje: string;
  exito: boolean;
}

export interface TipoSimulacionActualResponse {
  tipoSimulacion: TipoSimulacion;
  descripcion: string;
  timestamp: string;
}

export async function getMejorIndividuo(fechaInicio: string): Promise<Individuo> {
  try {
    console.log("Iniciando solicitud al servidor (GET con fecha). Fecha: " + fechaInicio);

    // Construir URL con par√°metro de consulta
    const url = `${API_URLS.MEJOR_INDIVIDUO}?fecha=${encodeURIComponent(fechaInicio)}`;

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
      // No se debe enviar body en un GET
    });

    console.log("Respuesta recibida:", {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries())
    });

    // Verificar el tipo de contenido
    const contentType = response.headers.get("content-type");
    console.log("Content-Type:", contentType);

    if (!contentType || !contentType.includes("application/json")) {
      console.error("Tipo de contenido inv√°lido:", contentType);
      throw new Error("La respuesta del servidor no es JSON v√°lido");
    }

    if (response.status === 204) {
      console.log("No hay datos disponibles (204)");
      throw new Error("No hay datos disponibles en este momento");
    }

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Error en la respuesta:", errorData);
      throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log("Datos recibidos:", data);

    if (!data) {
      console.error("Respuesta vac√≠a");
      throw new Error("La respuesta est√° vac√≠a");
    }

    return data as Individuo;
  } catch (error) {
    console.error("Error al obtener el mejor individuo:", error);
    throw error;
  }
}

/**
 * Inicia una nueva simulaci√≥n con una fecha espec√≠fica
 * @param fechaInicio - Fecha y hora de inicio en formato ISO (YYYY-MM-DDTHH:MM:SS)
 * @returns Promise con el mensaje de confirmaci√≥n
 */
export async function iniciarSimulacion(fechaInicio: string): Promise<string> {
  try {
    console.log("Iniciando simulaci√≥n con fecha:", fechaInicio);
    
    const response = await fetch(`${API_URLS.INICIAR_SIMULACION}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        fechaInicio: fechaInicio
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const mensaje = await response.text();
    console.log("Simulaci√≥n iniciada exitosamente:", mensaje);
    return mensaje;
  } catch (error) {
    console.error("Error al iniciar simulaci√≥n:", error);
    throw error;
  }
}

/**
 * Reinicia la simulaci√≥n actual
 * @returns Promise con el mensaje de confirmaci√≥n
 */
export async function reiniciarSimulacion(): Promise<string> {
  try {
    console.log("Reiniciando simulaci√≥n...");
    
    const response = await fetch(`${API_URLS.REINICIAR_SIMULACION}`, {
      method: 'GET'
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const mensaje = await response.text();
    console.log("Simulaci√≥n reiniciada exitosamente:", mensaje);
    return mensaje;
  } catch (error) {
    console.error("Error al reiniciar simulaci√≥n:", error);
    throw error;
  }
}

/**
 * Obtiene informaci√≥n sobre el estado de la simulaci√≥n
 * @returns Promise con la informaci√≥n de la simulaci√≥n
 */
export async function obtenerInfoSimulacion(): Promise<{
  totalPaquetes: number;
  paqueteActual: number;
  enProceso: boolean;
  tiempoActual: string;
}> {
  try {
     console.log("Obteniendo informaci√≥n de simulaci√≥n...");
    const info = {
      totalPaquetes: 199999999,
      paqueteActual: 991919191919,
      enProceso: true,
      tiempoActual: "1999-01-01T00:00:00Z"
    }
    // const response = await fetch(`${API_URLS.INFO_SIMULACION}`, {
    //   method: 'GET'
    // });

    // if (!response.ok) {
    //   const errorText = await response.text();
    //   throw new Error(`Error ${response.status}: ${errorText}`);
    // }

    // const info = await response.json();
    // console.log("Informaci√≥n de simulaci√≥n obtenida:", info);
    return info;
  } catch (error) {
    console.error("Error al obtener informaci√≥n de simulaci√≥n:", error);
    throw error;
  }
}

 

/**
 * Obtiene el siguiente paquete disponible en la simulaci√≥n
 * @returns Promise con el siguiente paquete o null si no hay m√°s paquetes
 */
export async function obtenerSiguientePaquete(): Promise<Individuo | null> {
  try {
    console.log("üì¶ PAQUETES: Obteniendo siguiente paquete de la simulaci√≥n...");
    
    // Usar la fecha actual como par√°metro por defecto en formato LocalDateTime
    const fechaActual = formatearFechaParaBackend(new Date());
    const url = `${API_URLS.MEJOR_INDIVIDUO}?fecha=${encodeURIComponent(fechaActual)}`;
    
    const response = await fetch(url, {
      method: 'GET'
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå PAQUETES: Error al obtener siguiente paquete:", errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      console.error("‚ùå PAQUETES: Tipo de contenido inv√°lido:", contentType);
      throw new Error("La respuesta del servidor no es JSON v√°lido");
    }

    if (response.status === 204) {
      console.log("‚è≥ PAQUETES: No hay m√°s paquetes disponibles (204)");
      return null;
    }

    const data = await response.json();
    
    if (!data) {
      console.log("‚è≥ PAQUETES: Respuesta vac√≠a - no hay m√°s paquetes");
      return null;
    }

    console.log("‚úÖ PAQUETES: Siguiente paquete obtenido exitosamente");
    return data;
  } catch (error) {
    console.error("‚ùå PAQUETES: Error al obtener siguiente paquete:", error);
    throw error;
  }
}

/**
 * Recalcula el algoritmo gen√©tico despu√©s de una aver√≠a usando la fecha y hora actual de la simulaci√≥n
 * @param fechaHoraActual - Fecha y hora actual de la simulaci√≥n en formato ISO
 * @returns Promise con la nueva soluci√≥n calculada
 */
export async function recalcularAlgoritmoDespuesAveria(fechaHoraActual: string): Promise<Individuo> {
  try {
    console.log("üß¨ RECALCULANDO: Ejecutando algoritmo gen√©tico para fecha actual:", fechaHoraActual);
    
    // Llamar al endpoint con la fecha actual de la simulaci√≥n
    const url = `${API_URLS.MEJOR_INDIVIDUO}?fecha=${encodeURIComponent(fechaHoraActual)}`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    console.log("üß¨ RECALCULANDO: Respuesta recibida:", {
      status: response.status,
      statusText: response.statusText
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå RECALCULANDO: Error al recalcular algoritmo:", errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      console.error("‚ùå RECALCULANDO: Tipo de contenido inv√°lido:", contentType);
      throw new Error("La respuesta del servidor no es JSON v√°lido");
    }

    const data = await response.json();
    
    if (!data) {
      console.error("‚ùå RECALCULANDO: Respuesta vac√≠a");
      throw new Error("La respuesta est√° vac√≠a");
    }

    console.log("‚úÖ RECALCULANDO: Nuevo algoritmo ejecutado exitosamente");
    return data as Individuo;
  } catch (error) {
    console.error("‚ùå RECALCULANDO: Error al recalcular algoritmo:", error);
    throw error;
  }
}

/**
 * Cambia el tipo de simulaci√≥n en el backend
 * @param tipoSimulacion - El nuevo tipo de simulaci√≥n a establecer
 * @returns Promise con la respuesta del cambio
 */
export async function cambiarTipoSimulacion(tipoSimulacion: TipoSimulacion): Promise<TipoSimulacionResponse> {
  try {
    // console.log("üîÑ TIPO SIMULACI√ìN: Cambiando tipo de simulaci√≥n a:", tipoSimulacion);
    
    const response = await fetch(API_URLS.CAMBIAR_TIPO_SIMULACION, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        tipoSimulacion: tipoSimulacion
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå TIPO SIMULACI√ìN: Error al cambiar tipo de simulaci√≥n:", errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    // console.log("‚úÖ TIPO SIMULACI√ìN: Tipo de simulaci√≥n cambiado exitosamente:", data);

 
    return data as TipoSimulacionResponse;
  } catch (error) {
    console.error("‚ùå TIPO SIMULACI√ìN: Error al cambiar tipo de simulaci√≥n:", error);
    throw error;
  }
}

/**
 * Obtiene el tipo de simulaci√≥n actual del backend
 * @returns Promise con la informaci√≥n del tipo de simulaci√≥n actual
 */
export async function obtenerTipoSimulacionActual(): Promise<TipoSimulacionActualResponse> {
  try {
    console.log("üìã TIPO SIMULACI√ìN: Obteniendo tipo de simulaci√≥n actual...");
    
    const response = await fetch(API_URLS.TIPO_SIMULACION_ACTUAL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå TIPO SIMULACI√ìN: Error al obtener tipo de simulaci√≥n actual:", errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    // console.log("‚úÖ TIPO SIMULACI√ìN: Tipo de simulaci√≥n actual obtenido:", data);
    return data as TipoSimulacionActualResponse;
  } catch (error) {
    console.error("‚ùå TIPO SIMULACI√ìN: Error al obtener tipo de simulaci√≥n actual:", error);
    throw error;
  }
}
